name: Secrets
# Run this workflow every time a new commit pushed to your repository.
on: 
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
jobs:
  fetch_some_secrets:
    runs-on: ubuntu-latest
    permissions: # Must change the job token permissions to use JWT auth
      id-token: write
      contents: read
    name: Fetch some static secrets
    steps:
      - name: Fetch secrets from AKeyless
        id: fetch-secrets
        uses: cmancone/akeyless-action@v1.0.0
        with:
          access-id: p-j71ismwhjmmxom
          # we use a JSON string because Github actions don't support dictionaries as inputs
          static-secrets: '{"/terraform-db/terraform-db-access-id":"TF_VAR_access_id","/terraform-db/terraform-db-access-key":"TF_VAR_access_key","/terraform-db/terraform-db-api-gateway-url":"TF_VAR_api_gateway_address","/terraform-db/Terraform-SA-GCP-Creds":"GOOGLE_CREDENTIALS","/terraform-db/terraform-github-token":"GH_TOKEN"}'
          #dynamic-secrets: '{"/path/to/dynamic/secret":"another_output_name"}'
          # these are true by default, but left here for reference
          export-secrets-to-outputs: true
          export-secrets-to-environment: true
      - name: Access ID from Akeyless
        run: echo "${{ env.TF_VAR_access_id }}"
      - name: Access Key from Akeyless
        run: echo "${{ env.TF_VAR_access_key }}"
      - name: Gateway API address from Akeyless
        run: echo "${{ env.TF_VAR_api_gateway_address }}"
      - name: Google Credentials from Akeyless
        run: echo "${{ env.GOOGLE_CREDENTIALS }}"
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
      - name: Run terraform apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -no-color -auto-approve
